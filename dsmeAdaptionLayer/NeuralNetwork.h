/*
 * openDSME
 *
 * Implementation of the Deterministic & Synchronous Multi-channel Extension (DSME)
 * introduced in the IEEE 802.15.4e-2012 standard
 *
 * Authors: Florian Meier <florian.meier@tuhh.de>
 *          Maximilian Koestler <maximilian.koestler@tuhh.de>
 *          Sandrina Backhauss <sandrina.backhauss@tuhh.de>
 *
 * Based on
 *          DSME Implementation for the INET Framework
 *          Tobias Luebkert <tobias.luebkert@tuhh.de>
 *
 * Copyright (c) 2015, Institute of Telematics, Hamburg University of Technology
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef NEURALNETWORK_H_
#define NEURALNETWORK_H_

#include "./quicknet/Math.h"
#include "./quicknet/Network.h"

namespace dsme {

template<typename T>
class NeuralNetwork {
public:
    NeuralNetwork();
    ~NeuralNetwork() = default;

    quicknet::Vector<T>& feedForward(quicknet::Vector<T>& input) {
        return this->network.feedForward(input);
    }

private:
    quicknet::Network<T> network;
};

/***IMPLEMENTATION***/

typedef quicknet::Layer<float> layer_t;
typedef quicknet::Vector<float> vector_t;
typedef quicknet::Matrix<float> matrix_t;

/******** Layer 0 ********/
static const float l0_weights_array[392] {
    2.89566016,-0.76838851,0.18196991,-0.38320810,0.35389730,-0.77322161,0.49111882,-1.37555146,-0.06730778,0.22756216,0.49739009,-0.10933142,1.09291637,-0.01726620,1.25761950,-0.39951578,0.12855145,0.03167287,-0.23456831,-0.18072817,-0.27723673,0.08225080,0.09130466,0.08668844,0.06748182,0.01360514,0.38890764,0.13482161,
    1.43617547,-0.49041170,1.65252483,-0.54415828,-1.94982219,0.13034058,-1.13684070,0.25129709,0.00876661,0.64424330,0.83925289,1.74881136,1.63331652,3.53398013,0.88995886,0.69887549,0.14888850,0.08717698,-0.05585580,-0.07999430,-0.05752885,0.10714085,0.13816823,-0.16372682,0.19617073,0.20675522,0.30163226,0.83866566,
    2.46971416,2.16361189,-1.92006052,2.53121114,0.58162826,-0.27783296,1.11192822,-0.04670744,0.73558110,-0.35666022,1.15947533,-0.06596932,1.05755758,1.40769374,0.14357151,0.39979386,0.18232736,0.19254631,0.11255841,0.24369515,0.07063549,0.05483149,-0.16637059,0.10675210,0.27061439,0.53303218,0.42334175,-0.71544039,
    -0.22310932,1.86971498,-1.68367171,-0.03917406,0.66417092,-0.38003629,-2.78757358,0.39275146,-1.48630261,0.10095985,-1.28144181,-0.47059506,-1.42959177,-0.16269015,0.44786602,-0.21654876,-0.21204580,-0.33103853,-0.31844872,-0.38533300,-0.49175701,-0.28892100,-0.14215001,-0.26604983,0.00138624,-0.04520474,-0.16525391,-0.16317330,
    2.70254302,-2.31819081,1.45860040,-2.67201662,1.76627123,0.44914931,0.52828705,-0.87173986,0.53726846,0.26693371,0.05370872,0.48151463,0.22503361,0.59977919,1.00828683,0.01888635,0.30499667,0.18916161,0.22427030,0.17803201,-0.00112447,0.06688939,0.21164498,0.10593025,0.11535366,0.13165107,0.04275341,0.34542817,
    1.80186808,2.53239822,-0.70507270,1.19501376,-0.87062657,0.42499435,0.12270696,0.65746105,-0.08233640,1.09144723,-0.10614847,2.84758401,-0.17561381,-0.16969298,-0.16924319,-0.13520427,-0.02994756,-0.06084968,-0.04554791,0.11560783,0.25247374,0.29237008,0.03579323,0.27787426,0.07410663,-0.13565451,0.18994704,-0.44151574,
    0.28420696,1.94619155,1.20595765,0.32509318,2.08327484,-0.49245939,0.68045628,-0.61016470,0.93730527,-0.05937102,2.24864817,-0.06575667,2.11708832,-0.56717938,-0.33728746,0.42609841,0.07032340,-0.14237848,-0.04706213,0.06524204,-0.05338198,0.17490554,0.22218312,-0.00454756,-0.15299144,0.12826979,0.39269415,0.23380806,
    0.24098937,-0.20559984,-0.18459432,-0.20252623,-0.36913493,-0.70553136,-0.88443130,-1.22102892,-1.44106257,-0.50637370,0.17478557,-1.38746595,2.68260932,-0.12019601,-1.45113075,-0.27206868,0.13762175,0.62054998,0.55984992,0.48630369,0.40692800,0.14330423,0.23840143,0.10796151,0.08234334,0.10791282,0.41639805,-0.72157609,
    0.55737090,-0.04129411,-1.62631726,-0.53176564,0.95311332,0.40129563,-0.74779022,-0.95182121,-0.67228997,-0.43443799,0.20324366,0.21457914,-4.65680695,0.87854272,-1.08509779,-0.34570664,-0.00406968,0.11280789,0.15420434,0.17522264,0.35658905,0.17059107,0.21495044,0.07110813,-0.13069156,-0.15662147,-0.12013975,-0.03116287,
    2.04514194,-0.00008062,-0.27297664,0.20403828,1.52455628,0.29950532,1.61958146,0.32777798,0.28108653,0.75406408,0.27223396,1.51880252,1.35686088,0.96821398,0.10278217,0.57135636,0.66816843,-0.02558051,-0.24686641,-0.11644026,0.37498280,0.06438674,0.22162765,0.04298028,-0.00184497,0.04256509,0.56336254,0.63225728,
    0.00525669,-0.74057907,-1.23293889,0.39299142,-0.19239020,0.78034979,0.00307616,-0.14444636,0.52204448,0.68558252,0.43520138,1.42068040,0.38768837,-3.86295271,1.89578009,0.09591281,-0.01803796,-0.00948465,0.03813149,0.05589923,0.04368216,-0.10497942,-0.19526622,-0.07788616,-0.04951845,0.01082613,-0.03853869,-0.27521160,
    0.44918635,-1.25389469,1.02121854,-0.51598263,0.97305596,-1.39248884,0.99306554,-2.47826600,1.68626189,-0.19661851,0.90191960,0.33306512,3.52709055,-0.21325918,0.03008103,0.41334224,0.27347633,0.16093935,0.15522356,0.01995735,-0.10932734,-0.21307482,-0.11912439,-0.12603867,-0.28268614,-0.36573648,-0.66332018,-0.06957732,
    1.04691315,-0.35765585,-1.36182845,0.10176509,-0.77026016,0.08892240,-0.89780986,0.74948573,-1.30461633,0.30662397,-1.19817519,0.13467684,-2.56793833,-0.64348102,0.52885449,-0.28234398,-0.17068332,-0.01078623,0.18337952,0.07466633,-0.04814931,-0.13859895,-0.22326154,-0.16392255,-0.20557994,-0.21029808,-0.29204515,-0.66727710,
    0.91152847,1.45468068,0.12212751,2.36546278,1.20620739,0.22933482,-1.13572502,3.74975753,1.23019278,0.82039303,0.75551367,-1.10059416,-0.36790162,-1.41893208,2.36878872,1.11834288,0.45186561,0.31300828,0.30678117,0.09719421,0.00847626,-0.10330316,0.15232988,-0.25922981,-0.35261583,-0.42662010,-0.29177734,-0.67693400,
};
static float l0_bias_array[14] {
    0.46047184,2.14801669,1.17777324,-1.88418210,2.09823275,1.81353414,1.05678689,-0.12767436,-1.11870527,2.76175523,-0.54454017,0.16334818,-0.70613092,2.74359465
};
static float l0_output_array[14];

static matrix_t l0_weights{14,28,l0_weights_array};
static vector_t l0_bias{14,l0_bias_array};
static vector_t l0_output{14,l0_output_array};

/******** Layer 1 ********/
static const float l1_weights_array[196] {
    0.36634788,1.58134735,1.61815500,-0.81965208,0.62724936,0.05044594,0.35435244,-0.05213884,-1.87189043,1.12983537,0.53643316,1.18502498,-0.25349826,0.05414600,
    -0.74677378,-1.02897346,0.25805053,-0.91702127,1.11412966,1.74990439,1.05433524,0.74210662,-0.54767776,1.12973452,0.83192509,0.92501265,-0.45247304,-1.17169988,
    0.27503890,0.29256648,-1.60569942,1.38956046,-1.14819896,0.08549639,-0.77693027,0.30296674,2.04954457,-0.47664583,-0.63948745,-1.54852617,1.78261650,0.83242488,
    1.65167582,0.34627694,0.43253005,-0.90453368,0.55011392,-0.29733109,0.77355725,-0.03030723,0.52748871,0.34892708,-0.33412364,0.39954528,0.01108300,-1.09584606,
    -0.88081461,0.59683830,-0.02975448,0.53210425,0.30004135,0.76682466,0.50584626,0.59579515,-1.20355785,1.74503911,-0.34938994,0.19599922,0.36063966,0.57812768,
    -0.02182944,0.24619441,0.40725622,0.40228206,-2.03094792,0.02074623,0.38673857,0.75597072,-1.61054409,-0.06648087,1.37258458,2.34445834,-0.91597492,2.66158414,
    1.41722059,1.26927745,1.58494484,-0.88723820,0.63365132,1.87286532,-0.33559704,-0.24006251,-1.62043250,0.89989138,0.67790323,0.95001656,-1.34003532,0.65025079,
    1.14197206,-0.41148749,-0.13978986,-0.30932897,-0.20029980,0.41063115,2.02227449,0.72220570,-1.01499224,0.94831699,-0.79521286,0.87258923,0.85338718,0.98712283,
    -0.28530863,-2.48222971,-0.60474622,-0.03447973,-1.37495410,-1.35900688,0.67235130,1.45392346,0.78955054,-0.66498739,0.06369003,-0.74121851,1.57356393,-0.74009091,
    0.59804118,0.32152367,0.21809474,-0.86105573,0.41405302,0.20937809,2.02659798,1.09419048,0.47274557,0.91376799,-1.29894340,0.35971588,1.32599032,-0.04456201,
    0.11231368,0.20946231,1.62526166,0.26328698,1.08392119,1.71278763,0.46583095,-0.32491285,-0.45109287,1.65387833,0.50336295,0.61364698,0.31634083,-0.66124743,
    -1.07273650,-0.89174372,-1.14409733,1.23335516,-0.37405246,-0.20924555,-1.33903241,-1.21942079,0.98284310,0.23044825,1.76378822,-1.07105231,1.00196397,0.19458292,
    -0.41702688,-0.71048969,-0.03766153,-0.16718775,-0.26954633,-0.07132244,-0.09581359,0.89279479,0.48444697,-1.13349843,-1.39876628,-0.71670407,-0.01762564,-0.70048630,
    -0.97909319,0.69448358,-1.64199138,0.93952024,-1.66086471,-0.54818374,-0.58591413,-0.71802002,0.43282756,-0.55011803,0.26146170,-0.75608027,0.23011254,2.34743524,
};
static float l1_bias_array[14] {
    0.57606828,0.09529036,0.20753865,0.09631967,2.19552279,-0.60530633,-0.14736925,0.09205315,-0.75815815,0.75657833,0.31390366,0.39555550,0.52174348,0.15092494
};
static float l1_output_array[14];

static matrix_t l1_weights{14,14,l1_weights_array};
static vector_t l1_bias{14,l1_bias_array};
static vector_t l1_output{14,l1_output_array};

/******** Layer 2 ********/
static const float l2_weights_array[70] {
    -0.26028359,0.73545188,0.56439120,-1.13843668,1.21145797,0.33513349,-0.51434052,0.11973468,0.18164879,1.02768362,-1.39551604,0.71854496,-0.34091282,0.67689818,
    2.29852629,-2.58810711,3.07386851,-1.27154696,-3.28090811,2.99962282,3.28668118,0.23119467,-5.09407711,-0.77199364,-2.27527666,4.63100195,-1.91446960,3.25536418,
    1.09143066,-2.86382985,3.69953656,-1.81736219,0.15045132,4.15014219,0.92823654,0.82261240,-1.64192986,1.51518977,-3.47783017,2.77309656,-0.55628538,3.78406763,
    0.63392824,-2.44804454,3.72888803,-1.44223046,-1.17054582,4.73741150,1.59250474,0.41423896,-1.77235520,0.50523889,-3.25927114,3.26049590,-0.57736778,3.33626151,
    1.65320814,-3.17557311,2.74937439,-0.61167932,-0.42827067,0.90314621,1.93687367,0.71840823,-2.44521475,1.10846746,-2.58001828,2.78280163,-2.63675404,2.87552977,
};
static float l2_bias_array[5] {
    -0.37805369,5.32865810,1.49110544,1.50526285,1.57906938
};
static float l2_output_array[5];

static matrix_t l2_weights{5,14,l2_weights_array};
static vector_t l2_bias{5,l2_bias_array};
static vector_t l2_output{5,l2_output_array};

/******** Network ********/
static layer_t layers[3] {
    {l0_weights, l0_bias, l0_output, quicknet::quick_tanh},
    {l1_weights, l1_bias, l1_output, quicknet::quick_tanh},
    {l2_weights, l2_bias, l2_output, quicknet::quick_linear},
};

template<typename T>
NeuralNetwork<T>::NeuralNetwork() : network{3, layers} {
}


} /* namespace dsme */
#endif /* NEURALNETWORK_H_ */
